<?php
    $PAGE_NAME = 'HTML';
    require_once($_SERVER["DOCUMENT_ROOT"].'/html/htmlhead.php');
?>
<main class="HTMLSection">
	<p>On every page in this section, on the left side of the screen you will find links to pages for each of the elements and tags used in HTML, sorted categorically and alphabetically. Each page will have a brief description of the element or tag, an example of its use, and a list of attributes applicable to it. Some tags only appear inside of other elements, which will not have dedicated pages; additionally, a list of deprecated tags is provided, but as these tags are not supported by modern web browsers, no examples will be given. On this page, you will also find explanations of the more basic concepts in HTML.
	<h4>What is HTML?</h4>	
	<p>HTML is the most basic of the languages used in web development. It is arguably the easiest, but what there's no room for debate on is that every real website has HTML as its backbone, no matter how much CSS, Javascript, JQuery, and server-side scripting is involved, it relies on HTML to actually display the page. However, as with all languages from the simplest to the most complex, there are certain basic concepts to keep in mind for best use.</p>
	<h4>How to Format Your HTML Document</h4>
	<p>HTML as a language has a much more lenient syntax than many others, such as C# or Javascript. Tabbing isn't necessary, capitalization is ignored, unnecessary spaces often won't be displayed, and technically, you can page break as much or as little as you want, but this doesn't mean your code should be sloppy or all over the page. The style I use for my code is the one I believe to be most ideal for my purposes, for the most part sticking close to the standards used by web professionals, with some personal quirks that improve readability for me, but you don't have to do it exactly like I do as long as you follow some simple rules. <wbr><strong>Keep it readable.</strong> If you work in web development, or even just if your page gets complex and you need to revisit it far in the future, your HTML should be easy for a competent programmer to understand by looking at it. If it's not, you probably need to either tighten up your syntax, add more comments to anything particularly complex, or both. <wbr><strong>Keep it consistent.</strong> Once you decide on how you will format your HTML documents, follow the rules you set for yourself without any unnecessary exceptions, and even those should have comments explaining why that was necessary. And don't fall into the trap of changing your personal syntax midway through a <wbr>project - <wbr><em>follow good practice</em> and update your older work! <wbr><strong>When in doubt, follow the mainstream.</strong> There's no harm in innovation, but only when it actually improves something. For the most part, you should strive to have your code resemble that of your peers, unless you feel there's a pressing reason to do <wbr>otherwise - the alternative makes your work more mentally taxing to read, and will leave reviewers, collaborators, teammates, and/or employers scratching their heads, wondering why you did it that way.</p>
	<h4>Block vs. Inline</h4>
	<p>There is the difference between the usage of block elements, inline blocks, and inline tags. Normal block elements occupy a new line on the screen, even without a line break being specified. Inline blocks are technically separate objects like normal blocks are, but they display inline by default (unless modified by CSS), meaning they won't create a line break on their own. Inline tags modify the text contained within them in some way, but otherwise leave the layout of the page alone. And both block elements and inline blocks may have a parent/child relationship with all of the other elements and tags after the point that they are opened, up to the point where they are closed. This means that any function the container element has will be applied to all of its child elements, including CSS formatting. Modern web standards make it important, in particular, to ensure that you close all child elements before closing the parent - this is called the rule of clear heredity. Also note that throughout these pages, I will refer to potential containers as <strong>elements</strong>, and if it can't be a container, I will refer to it as a <strong>tag</strong>. Furthermore, in my examples I will show elements/tags inside of a container with one tabulation for each container they are a child of, as well as a line break between each one, whereas inline tags will be placed all on the same line <wbr>(not counting text wrapping).</p>
	<h4>One Size Doesn't Fit All</h4>
	<p>It's important to know that each element or tag has both its own, default, unmodified functionality, a set of attributes that can be applied to it, whatever CSS rules may be specified in the stylesheet to modify that element/tag or its class/ID, <em>and</em> whatever CSS rules may be inherited from the parent container. Depending on these factors, the same element or tag can look and behave quite differently between websites or even on the same site. Also worth noting is that along with unique attributes associated with specific elements, there is also a list of global attributes that can be applied to many different elements and tags.</p>
	<h4>HTML5 and the Syntactic Web</h4>
	<p>Introduced with HTML5, there is a modern design philosophy known as the Syntactic Web. Simply put, this concept states that whenever possible, programmers should attempt to use the most appropriate element or tag for the task at hand, even though it is often possible to accomplish an identical result several different ways. The reason for this is that in the modern era, it's becoming more and more common for websites to be read by programs rather than <wbr>people - and the programs are looking at your code, not how it renders in the web browser. Search engines are the most major example of this, along with screen readers that enable the blind to still, to an extent, navigate the web. The more clear it is what everything on the page is, in terms of usage and category, the more optimally these things will function. And in a professional environment, 99 times out of 100, having your content well-formatted for search engines is very, very important!</p>
</main>	
<?php
    require_once($_SERVER["DOCUMENT_ROOT"].'/genericfoot.php');
?>
